---
 - name: Installing coin massa
   hosts: "{{ list_hosts }}"
   become: true

   tasks:

     - name: check for a directory
       stat:
           path: "{{ ansible_env.HOME }}/massa/"
       register: dir_exists
     - block:
         - name: update and upgrade apt packages
           apt:
               upgrade: true
               update_cache: true
               cache_valid_time: 86400

         - name: installing application
           shell: "apt install jq curl pkg-config git build-essential libssl-dev -y"
           register: result_installing
         - name: get results installing
           debug: var=result_installing.stdout_lines

         - name: shell --version
           shell:
               cmd: wget -qO- https://api.github.com/repos/massalabs/massa/releases/latest | jq -r ".tag_name"
           register: massa_version
          
         - name: load archive
           shell:
               cmd: wget -qO $HOME/massa.tar.gz "https://github.com/massalabs/massa/releases/download/{{ massa_version.stdout }}/massa_{{ massa_version.stdout }}_release_linux.tar.gz"

         - name: unpack archive
           shell:
               cmd: tar -xvf $HOME/massa.tar.gz

         - name: delete archive
           shell:
               cmd: rm -rf $HOME/massa.tar.gz

         - name: chmod files
           shell:
               cmd: chmod +x $HOME/massa/massa-node/massa-node $HOME/massa/massa-client/massa-client

         - name: create file service
           copy:
               dest: "/etc/systemd/system/massad.service"
               content: |
                   [Unit]
                   Description=Massa Node
                   After=network-online.target

                   [Service]
                   User={{ ansible_env.USER }}
                   WorkingDirectory={{ ansible_env.HOME }}/massa/massa-node
                   ExecStart={{ ansible_env.HOME }}/massa/massa-node/massa-node
                   Restart=on-failure
                   RestartSec=3
                   LimitNOFILE=65535

                   [Install]
                   WantedBy=multi-user.target

         - name: enable massad
           ansible.builtin.systemd: 
               name: massad
               enabled: true

         - name: daemon-reload
           ansible.builtin.systemd: 
               daemon_reload: true

         # open_ports
         - name: open_ports stop massad
           ansible.builtin.systemd: 
               name: massad
               state: stopped

         - name: open_ports open ports
           shell: 
               cmd: . <(wget -qO- https://raw.githubusercontent.com/SecorD0/utils/main/miscellaneous/ports_opening.sh) 31244 31245
           args:
               executable: /bin/bash
           register: open_ports_result
         - name: print result open ports
           debug: var=open_ports_result.stdout_lines

         - name: open_ports tee
           shell: |
               tee <<EOF >/dev/null {{ ansible_env.HOME }}/massa/massa-node/config/config.toml
               [network]
               routable_ip = "`wget -qO- eth0.me`"
               EOF
           args:
               executable: /bin/bash

         - name: open_ports install net-tools
           apt: 
               name: net-tools
               state: latest

         - name: open_ports netstat
           shell: 
               cmd: /bin/netstat -tln
           register: netstat_result 
           ignore_errors: true
         
         - name: print result
           debug: var=netstat_result.stdout_lines

         - name: open_ports restart massad
           ansible.builtin.systemd: 
               name: massad
               state: restarted
         # end open_ports

         - name: go to massa-client folder
           shell: chdir=/root/massa/massa-client/ ls

         - name: check for a directory massa_backup
           stat:
               path: "{{ ansible_env.HOME }}/massa_backup"
           register: dir_exists_massa_backup

         # if not exist massa_backup
         - name: generate private key 
           raw: ./massa-client wallet_generate_private_key
           when: not dir_exists_massa_backup.stat.exists
         # else
         - name: copy node_privkey.key
           ansible.builtin.copy:
               src: "{{ ansible_env.HOME }}/massa_backup/node_privkey.key"
               dest: "{{ ansible_env.HOME }}/massa/massa-node/config/node_privkey.key"
               mode: '0555'
           when: dir_exists_massa_backup.stat.exists

         - name: restart massad
           ansible.builtin.systemd: 
               name: massad
               state: restarted
           when: dir_exists_massa_backup.stat.exists

         - name: copy private key 
           ansible.builtin.copy:
               src: "{{ ansible_env.HOME }}/massa_backup/wallet.dat"
               dest: "{{ ansible_env.HOME }}/massa/massa-client/wallet.dat"
               mode: '0555'
           when: dir_exists_massa_backup.stat.exists
         # end if

         - name: wget insert variables
           shell: ". <(wget -qO- https://raw.githubusercontent.com/SecorD0/Massa/main/insert_variables.sh)"
           args:
               executable: /bin/bash
           register: result_wget

         - name: get wget
           debug: var=result_wget.stdout_lines

         # if not exist massa_backup
         - name: create directory massa backup
           file:
               path: "{{ ansible_env.HOME }}/massa_backup"
               state: directory
           when: not dir_exists_massa_backup.stat.exists

         - name: copy wallet.dat
           ansible.builtin.copy:
               src: "{{ ansible_env.HOME }}/massa/massa-client/wallet.dat"
               dest: "{{ ansible_env.HOME }}/massa_backup/wallet.dat"
               mode: '0555'
           when: not dir_exists_massa_backup.stat.exists

         - name: copy private key 
           ansible.builtin.copy:
               src: "{{ ansible_env.HOME }}/massa/massa-node/config/node_privkey.key"
               dest: "{{ ansible_env.HOME }}/massa_backup/node_privkey.key"
               mode: '0555'
           when: not dir_exists_massa_backup.stat.exists
         # end if
         
         - name: go to root folder
           shell: chdir=/ ls
       when: not dir_exists.stat.exists